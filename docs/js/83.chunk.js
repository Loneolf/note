"use strict";(self.webpackChunksource_map=self.webpackChunksource_map||[]).push([[83],{84083:(t,n,e)=>{e.r(n),e.d(n,{default:()=>s});const s='实战是检验学习效果的一种方式，通过自己用webpack搭建项目，可以更深的理解webpack，本篇用webpack搭建react开发环境，并在后面加上升级版的TS环境，也会将遇到的问题贴上\n\n搭建react开发环境有一些需要注意点，资源处理，jsx文件编译，css编译，引入antd UI库，react Router处理，状态管理，根据环境加载不同的config文件等，根据之前学习的只是，搭建如下配置\n\n[代码地址](https://github.com/Loneolf/practice/tree/master/webpack/myReactApp)\n\n通用配置`webpack.config.common.js`\n```\nconst path = require("path");\nconst HTMLWebpackPlugin = require("html-webpack-plugin");\nconst ESLintPlugin = require("eslint-webpack-plugin");\n\n\nmodule.exports = {\n\tentry: "./src/main.js",\n\tplugins: [\n\t\tnew HTMLWebpackPlugin({\n\t\t\ttemplate: path.resolve(__dirname, "../public/index.html"), // 以该文件为模板生成HTML\n\t\t}),\n\t\tnew ESLintPlugin({\n\t\t\tcontext: path.resolve(__dirname, "../src"),\n\t\t\texclude: "node_modules",\n\t\t\tcache: true,\n\t\t\tcacheLocation: path.resolve(__dirname,"../node_modules/.cache/.eslintcache"),\n\t\t}),\n\t],\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\toneOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttest: /\\.(jp?eg|png|svg|webp|gif)$/, // 用正则匹配以jpg为结尾的资源\n\t\t\t\t\t\ttype: "asset",\n\t\t\t\t\t\t// asset 自动根据文件大小生成资源或者base64的url，默认值为8K 4*1024\n\t\t\t\t\t\tparser: {\n\t\t\t\t\t\t\tdataUrlCondition: {\n\t\t\t\t\t\t\t\tmaxSize: 10 * 1024, //\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttest: /\\.(woff|woff2|ttf|otf|eot|txt)$/,\n\t\t\t\t\t\ttype: "asset/resource",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttest: /\\.jsx?$/,\n\t\t\t\t\t\t// exclude: /node_modules/, // 排除node_modules中的库\n\t\t\t\t\t\tinclude: path.resolve(__dirname, "../src"),\n\t\t\t\t\t\tloader: "babel-loader",\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tcacheDirectory: true,\n\t\t\t\t\t\t\tcacheCompression: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t}\n\t\t],\n\t},\n\tresolve: {\n\t\textensions: [".jsx", ".js", ".json"], // 自动补全文件扩展名，让jsx可以使用\n\t\talias: {\n\t\t\t\'@\': path.resolve(__dirname, \'../src\'),\n\t\t\t\'@s\': path.resolve(__dirname, \'../src/store\')\n\t\t},\n\t},\n\toptimization: {\n\t\tsplitChunks: {\n\t\t\tchunks: "all",\n\t\t\tcacheGroups: {\n\t\t\t\t // react相关的一起打包成一个js文件\n\t\t\t\t react: {\n\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]react(.*)?[\\\\/]/,\n\t\t\t\t\tname: "chunk-react",\n\t\t\t\t\tpriority: 40,\n\t\t\t\t  },\n\t\t\t\t  // antd 单独打包\n\t\t\t\t  antd: {\n\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]antd[\\\\/]/,\n\t\t\t\t\tname: "chunk-antd",\n\t\t\t\t\tpriority: 30,\n\t\t\t\t  },\n\t\t\t\t  // 剩下node_modules单独打包\n\t\t\t\t  libs: {\n\t\t\t\t\ttest: /[\\\\/]node_modules[\\\\/]/,\n\t\t\t\t\tname: "chunk-libs",\n\t\t\t\t\tpriority: 20,\n\t\t\t\t  },\n\t\t\t},\n\t\t},\n\t\truntimeChunk: {\n\t\t\tname: (entrypoint) => `runtime~${entrypoint.name}`,\n\t\t},\n\t},\n};\n\n```\n\n开发环境配置\n```\nconst path = require("path");\nconst ReactRefreshWebpackPlugin = require(\'@pmmmwh/react-refresh-webpack-plugin\');\n\nmodule.exports = {\n\tentry: "./src/main.js",\n\toutput: {\n\t\tpath: undefined,\n\t\tclean: true,\n\t\tfilename: "js/[name].js",\n\t\tchunkFilename: "js/[name].chunk.js",\n\t\tassetModuleFilename: "[name].[ext]", // images/test.png\n\t},\n\tmode: "development",\n\tdevtool: "cheap-module-source-map",\n\tplugins: [\n\t\tnew ReactRefreshWebpackPlugin()\n\t],\n\tdevServer: {\n\t\tclient: {\n\t\t\toverlay: false,\n\t\t},\n\t\tcompress: true,\n\t\t// 自定义端口号\n\t\tport: 3000,\n\t\topen: true,\n\t\thot: true,\n\t\thistoryApiFallback: true,\n\t\tproxy: { // 配置代理\n\t\t\t// "/api": "http://localhost:9000", // 直接代理\n\t\t\t"/api": { // 使用对象，可以重写路径\n\t\t\t\ttarget: "http://localhost:9000",\n                // 重写路径\n                pathRewrite: {\n                    "^/api":"/test",\n                },\n                // 确保请求主机名是target中的主机名\n                changeOrigin: true\n\t\t\t}\n\t\t},\n\t},\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(css|scss|sass)$/,\n\t\t\t\tuse: [\n\t\t\t\t\t"style-loader",\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: "css-loader",\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tmodules: {\n\t\t\t\t\t\t\t\tlocalIdentName:\n\t\t\t\t\t\t\t\t\t"[name]_[local]_[hash:base64:6]",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timportLoaders: 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: "postcss-loader",\n\t\t\t\t\t},\n\t\t\t\t\t"sass-loader",\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\\.jsx?$/,\n\t\t\t\t// exclude: /node_modules/, // 排除node_modules中的库\n\t\t\t\tinclude: path.resolve(__dirname, "../src"),\n\t\t\t\tloader: "babel-loader",\n\t\t\t\toptions: {\n\t\t\t\t\tcacheDirectory: true,\n\t\t\t\t\tcacheCompression: false,\n\t\t\t\t\tplugins: [\n\t\t\t\t\t\t"react-refresh/babel", // 激活js的HMR\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n\n```\n\n生产环境配置, `webpack.config.prod.js`\n```\nconst path = require("path");\nconst MiniCssExtractPlugin = require("mini-css-extract-plugin");\nconst CssMinimizerWebpakPlugin = require("css-minimizer-webpack-plugin");\nconst TerserPlugin = require("terser-webpack-plugin");\nconst CopyPlugin = require("copy-webpack-plugin");\n\nmodule.exports = {\n\toutput: {\n\t\tpath: path.resolve(__dirname, "../dist"),\n\t\tclean: true,\n\t\tfilename: "js/[name]_[contenthash:10].js",\n\t\tchunkFilename: "js/[name].chunk.js",\n\t\tassetModuleFilename: "asset/[name]_[contenthash:10][ext]", // images/test.png\n\t},\n\tmode: "production", // development | production\n\tdevtool: "source-map",\n\tplugins: [\n\t\tnew MiniCssExtractPlugin({\n\t\t\t// 默认生成main.css\n\t\t\tfilename: "style/[name]_[contenthash].css", // 生成的文件放在dest/style目录下，文件名为hash值\n\t\t}),\n\t\tnew CopyPlugin({\n\t\t\tpatterns: [\n\t\t\t\t{\n\t\t\t\t\tfrom: path.resolve(__dirname, "../public"),\n\t\t\t\t\tto: path.resolve(__dirname, "../dist"),\n\t\t\t\t\tglobOptions: {\n\t\t\t\t\t\t// 忽略index.html文件\n\t\t\t\t\t\tignore: ["**/index.html"],\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t],\n\t\t}),\n\t],\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(css|scss|sass)$/,\n\t\t\t\tuse: [\n\t\t\t\t\tMiniCssExtractPlugin.loader,\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: "css-loader",\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tmodules: {\n\t\t\t\t\t\t\t\tlocalIdentName:\n\t\t\t\t\t\t\t\t\t"[name]_[local]_[hash:base64:6]",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\timportLoaders: 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloader: "postcss-loader",\n\t\t\t\t\t},\n\t\t\t\t\t"sass-loader",\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttest: /\\.jsx?$/,\n\t\t\t\tinclude: path.resolve(__dirname, "../src"),\n\t\t\t\tloader: "babel-loader",\n\t\t\t},\n\t\t],\n\t},\n\toptimization: {\n\t\tminimizer: [new CssMinimizerWebpakPlugin(), new TerserPlugin()],\n\t},\n};\n\n```\n环境区分，配置merge  `webpack.config.js`\n```\nconst { merge } = require("webpack-merge");\n\nconst commonConfig = require("./webpack.config.common");\nconst productionConfig = require("./webpack.config.prod");\nconst developmentConfig = require("./webpack.config.dev");\n\nmodule.exports = () => {\n  switch (process.env.NODE_ENV) {\n    case "development":\n      return merge(commonConfig, developmentConfig);\n    case "production":\n      return merge(commonConfig, productionConfig);\n    default:\n      return new Error("No match configuration was found");\n  }\n};\n```\n用到的依赖包和指令\n```\n{\n  "name": "source-map",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "start": "npm run dev",\n    "dev": "cross-env NODE_ENV=development webpack serve --config ./config/webpack.config.js",\n    "build": "cross-env NODE_ENV=production webpack --config ./config/webpack.config.js"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n    "@babel/core": "^7.23.2",\n    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",\n    "@pmmmwh/react-refresh-webpack-plugin": "^0.5.11",\n    "autoprefixer": "^7.2.6",\n    "babel-loader": "^9.1.3",\n    "babel-preset-react-app": "^10.0.1",\n    "copy-webpack-plugin": "^11.0.0",\n    "cross-env": "^7.0.3",\n    "css-loader": "^6.8.1",\n    "css-minimizer-webpack-plugin": "^5.0.1",\n    "customize-cra": "^1.0.0",\n    "eslint": "^8.49.0",\n    "eslint-config-react-app": "^7.0.1",\n    "eslint-plugin-import": "^2.28.1",\n    "eslint-webpack-plugin": "^4.0.1",\n    "husky": "^8.0.3",\n    "mini-css-extract-plugin": "^2.7.6",\n    "node-sass": "^9.0.0",\n    "postcss-loader": "^7.3.3",\n    "postcss-preset-env": "^9.1.3",\n    "react-refresh": "^0.14.0",\n    "sass-loader": "^13.3.2",\n    "style-loader": "^3.3.3",\n    "terser-webpack-plugin": "^5.3.9",\n    "webpack": "^5.88.1",\n    "webpack-cli": "^5.1.4",\n    "webpack-dev-server": "^4.15.1",\n    "webpack-merge": "^5.10.0"\n  },\n  "broeserslist": [\n    "> 1%",\n    "last 2 versions"\n  ],\n  "dependencies": {\n    "@reduxjs/toolkit": "^1.9.7",\n    "antd": "^5.10.3",\n    "react": "^18.2.0",\n    "react-dom": "^18.2.0",\n    "react-redux": "^8.1.3",\n    "react-router-dom": "^6.17.0"\n  }\n}\n\n```\n\n其它配置`.eslintrc.json`，使用了`react-app`做ESlint规则校验\n```\n{\n    "env": {\n        "browser": true,\n        "es2021": true\n    },\n    "extends": "react-app",\n    "parserOptions": {\n        "ecmaVersion": "latest",\n        "sourceType": "module"\n    },\n    "rules": {\n        "linebreak-style": 0,\n        "import/no-import-module-exports": 0,\n        "import/extensions": 0,\n        "import/no-extraneous-dependencies": 0,\n        "no-console": 0\n        // "no-sparse-arrays": 0\n    }\n}\n\n```\nbabel.config.js\n```\nmodule.exports = {\n    presets: ["react-app"]\n}\n```\n具体代码内容可在git上面下载查看，配置过程中有些需要注意的点\n\n1、通过`splitChunks`的`cacheGroups`将依赖分类打包\n2、使用`react-refresh/babel`激活JS文件中的HMR，但是如果文件引入了antd模块，则会失效\n3、使用`copy-webpack-plugin`插件复制不需要打包的资源\n4、开发环境使用`historyApiFallback: true`，确保刷新正常显示页面\n\n#### 项目升级TS需要注意的点\n1、下载对应的依赖包\n```\nts-loader typescript @types/node @types/react @types/react-dom\n```\n2、将文件名后缀改为`.ts、.tsx`，并使用`ts-loader`编译对应文件\n3、使用`tsc --int`生成`tsconfig.json`配置文件，文件内容可以copy`npx create-react-app my-react-app --template typescript`中的`tsconfig.json`\n配置如下\n```\n{\n  "compilerOptions": {\n    "target": "es5",\n    "lib": [\n      "dom",\n      "dom.iterable",\n      "esnext"\n    ],\n    "allowJs": true,\n    "skipLibCheck": true,\n    "esModuleInterop": true,\n    "allowSyntheticDefaultImports": true,\n    "strict": true,\n    "forceConsistentCasingInFileNames": true,\n    "noFallthroughCasesInSwitch": true,\n    "module": "esnext",\n    "moduleResolution": "node",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "noEmit": false,\n    "noEmitOnError": true,\n    "jsx": "react-jsx",\n    "baseUrl": "./",\n    "paths": {\n      "@/*": ["src/*"],\n      "@s/*":["src/store/*"]\n    },\n  },\n  "include": [\n    "src",\n    "typed-css.d.ts"//配置的.d.ts文件"\n  ]\n}\n\n```\n`noEmit`和`noEmitOnError`是为了解决报错`Error: TypeScript emitted no output for Api.ts`\n4、路径别名需要再`tsconfig.json`中使用`baseUrl`和`paths`同样配置，否则报错\n5、因为在项目中使用了样式模块化，所以还需要加上样式的配置文件按，否则导入报错\n```\n// typed-css.d.ts文件\ndeclare module "*.css" {\n\tconst classes: { readonly [key: string]: string };\n\texport default classes;\n}\n\ndeclare module "*.sass" {\n\tconst classes: { readonly [key: string]: string };\n\texport default classes;\n}\n\ndeclare module "*.scss" {\n\tconst classes: { readonly [key: string]: string };\n\texport default classes;\n}\n\n```\n\n解决完上面的问题，项目的TS环境也基本搭建完成'}}]);
//# sourceMappingURL=83.chunk.js.map