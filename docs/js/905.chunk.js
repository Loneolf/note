"use strict";(self.webpackChunksource_map=self.webpackChunksource_map||[]).push([[905],{92905:(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});const r='### declare 关键字\n> declare关键字用于向 TypeScript 编译器提供类型信息，告诉编辑器，某个类型是存在的，可以在当前文件中使用，故而编译后也不会有任何的declare语句\n\n我们在使用某些没有类型的库的时候可以使用 `declare`关键字定义类型，某些全局变量，也可以使用`declare`定义类型\n`declare` 不用给出具体实现，只需要描述类型，也只能描述已经存在的变量和数据结构，不能用来声明新的类型和数据结构，\n`declare`可以描述 变量`(const、let、var`)、`type`、`class`、`enum`、`函数`、`模块`、`命名空间`\n\n#### declare variable，描述变量\n当前脚本使用了其它脚本定义的全局变量存在类型错误时，我们可以使用declare进行描述\n```\ndeclare var x1: string;\ndeclare let x2: string\nx1.includes(\'1\') // 可以使用string类型的方法不报错\nx1 = \'123\' //正常赋值或者使用\n\ndeclare let x3: number = 1; // 报错\n```\ndeclare关键字只能给出类型描述，不能涉及值\n#### declare function\n单独的函数类型声明只能放在declare命令后面,TS不支持单独的函数类型声明\n```\ndeclare function sayHello(name: string): void;\nsayHello(\'张三\');\n```\n#### declare class\n```\ndeclare class Animal {\n    public a: number;\n    private b: number;\n    constructor(name: string);\n    eat(): void;\n    sleep(): void;\n}\n```\n#### declare module & declare namespace\n```\ndeclare namespace AnimalLib {\n    class Animal2 {\n        constructor(name: string);\n        eat(): void;\n        sleep(): void;\n    }\n\n    type Animals2 = \'Fish\' | \'Dog\';\n}\n// 或者\ndeclare module AnimalLib2 {\n    class Animal3 {\n        constructor(name: string);\n        eat(): void;\n        sleep(): void;\n    }\n    type Animals3 = \'Fish\' | \'Dog\';\n}\n```\n\n#### declare global\n为原生JS对象添加属性和方法，可以使用declare global{} 语法\ndeclare global必须用在模块中，可以在代码中添加`export {}`,这样文件会成为模块，效果全局有效\n\n\n给String添加toSmallString方法\n```\nexport { };\ndeclare global {\n    interface String {\n        toSmallString(): string;\n    }\n}\nString.prototype.toSmallString = (): string => {\n    // 具体实现\n    return \'\';\n};\n```\n给window添加属性myAppConfig\n```\nexport { };\ndeclare global {\n    interface Window {\n        myAppConfig: object;\n    }\n}\nconst config = window.myAppConfig;\n```\n\n#### declare enum\n```\ndeclare enum E1 {\n    A,\n    B,\n}\ndeclare enum E2 {\n    A = 0,\n    B = 1,\n}\ndeclare const enum E3 {\n    A,\n    B,\n}\ndeclare const enum E4 {\n    A = 0,\n    B = 1,\n}\n```\n\n### d.ts类型声明文件\n我们可以将单独使用的模块其中的类型抽离出来，单独组成一个类型声明文件，便于模块使用者了解接口\n类型声明文件只有类型代码，不加具体的实现代码，文件名一般为`[模块名].d.ts`，其中d可理解为declaration(声明)\n\n```\n// types.d.ts\nexport interface Character {\n    catchphrase?: string;\n    name: string;\n}\n// index.ts\nimport { Character } from "./types";\nexport const character: Character = {\n    catchphrase: "Yee-haw!",\n    name: "Sandy Cheeks",\n};\n```\n\n#### 类型声明文件来源\n1、TS编译器自动生成\n2、TS内置类型文件\n3、外部模块类型声明文件通过npm包安装\n\n##### 自动生成\n可以打开declaration选项，编译自动生成类型声明文件\n```\n{\n    "compilerOptions": {\n        "declaration": true\n    }\n}\n```\n##### TS内置声明文件\nTS内置的声明文件主要是内置的全局对象的类型声明，在安装TS时自动安装\n在TS页面随便写一个全局变量，例如`document`，`ctrl+左键`即可点击进去，查看对应的目录，主要在`TypeScript`的`lib`目录下\n主要有`lib.d.ts`、`lib.dom.d.ts`、`lib.es2015.d.ts`、`lib.es5.d.ts`等\nTS会根据编译目标target值，加载对应的内置生命文件，无需特别配置\n\n##### 外部类型声明文件\n当项目中使用了外部的第三方库，就需要这个库的声明文件，但是又分三种情况\n1. 库源码自带类型声明文件，这是我们就不需要处理\n2. 库没有自带，可以在社区中找到，例如`jQuery`，通常有名的第三方库，要么自带，要么可以在[DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)这个库找到\n这些声明文件通常发布到`npm`的`@types`命名空间下，`jQuery`的类型声明库为`@types/jquery`\nTS会自动加载`node_modules/@types`目录下的模块，一般无需额外处理，不过我们也可以通过编译选项`typeRoots`更改，\n3. 找不到类型声明文件，自己写~\n\n#### d.ts中的declare关键字\n因为`declare`只能声明类型，所以很适合在`d.ts`中使用，\n在`d.ts`文件中，变量类型描述需要使用`declare`描述，而`interface`本身就是类型代码，可加也可不加`declare`\n\n#### 模块发布\n当前模块包含自己的类型声明文件，可以再`package.json`中添加`types`或者`typings`字段\n```\n{\n    "name": "awesome",\n    "author": "Vandelay Industries",\n    "version": "1.0.0",\n    "main": "./lib/main.js",\n    "types": "./lib/main.d.ts"\n}\n```\n类型声明文件为`index.d.ts`，可以不需要`再package.json`中注明，会自动加载\n\n#### 三斜杠命令\n当存在类型声明文件内容很多需要拆分时，可以在入口文件使用三斜杠命令，加载拆分后的文件\n\n在`main.d.ts`加载拆分的`interface.d.ts`和`function.d.ts`文件\n```\n/// <reference path="./interfaces.d.ts" />\n/// <reference path="./functions.d.ts" />\n```\n三斜杠只能用在文件头部，三斜杠处了拆分类型声明文件，还可以用于普通脚本加载类型声明文件\n其主要有三个参数，path，type，lib\n\n##### /// <reference path="" />\n最常见的三斜杠命令，常用来声明当前脚本依赖的类型文件\n```\n/// <reference path="node.d.ts"/>\nimport * as URL from "url";\nlet myUrl = URL.parse("https://www.typescriptlang.org");\n```\n编辑器在预处理阶段找出所有的三斜杠引用文件添加到编译列表一块编译，path可以是相对路径，也可以是库中的类型声明文件\n\n##### /// <reference types="" />\n`types` 参数用来告诉编译器当前脚本依赖某个 `DefinitelyTyped` 类型库，通常安装在`node_modules/@types`目录\n```\n/// <reference types="node" />\n```\n如上表示编译时添加node.js的类型库，node_modules目录里面的@types/node/index.d.ts\n上面的命令应该只用在自己手写的类型声明文件中，普通TS脚本可以在tsconfig.json中的types指定依赖的库类型\n\n##### /// <reference lib="" />\n允许脚本文件显式包含内置 `lib `库，等同于在`tsconfig.json`文件里面使用`lib`属性指定 `lib` 库。\n```\n/// <reference lib="es2017.string" />\n// 对应库为lib.es2017.string.d.ts\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'}}]);
//# sourceMappingURL=905.chunk.js.map