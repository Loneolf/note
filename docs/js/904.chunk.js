"use strict";(self.webpackChunksource_map=self.webpackChunksource_map||[]).push([[904],{904:(n,e,t)=>{t.r(e),t.d(e,{default:()=>s});const s='### 开发效率与开发规范\n\n#### source-map\n\n[参考文章1](https://juejin.cn/post/7209648356530962489)，[参考文章2](https://juejin.cn/post/7136049758837145630)\n\n开发环境我们可以通过source-map帮助我们将错误信息映射到对应的源码位置，webpack内置了该功能，通过配置`devtool`就可以开启或者关闭该功能\n```\n    module.exports = {\n        ...\n    \tdevtool: \'source-map\'\n    \t...\n    }\n```\nsource-map简而言之就是一个以.map为后缀的文件，该文件以json的格式存储了源代码打包后的位置信息\n```\n    {\n        "version": 3,  // sourcemap版本号\n        "file": "index_bounder.js", // 打包构建后的文件名，该map文件与之对应，只是多了.map后缀\n        "mappings": ";;;;;AAAA", // 源代码位置与构建产物之间的映射\n        "sources": [ // 指该bundle对应的源码文件，一个bundle文件可能存在多个源码文件内容\n            "webpack://source-map/./index.js"\n        ],\n        "sourcesContent": [ // 源码文件对应的内容字符\n            "console.log(\'aaa2333,hello呀,树哥\')"\n        ],\n        "names": [], // 指在代码在经历混淆压缩之前的变量名，这个变量名包含导入模块名、常用方法名\n        "sourceRoot": "" //源码目录\n    }\n```\n##### devtool 选项配置，值类型包含以下类型组合\n\n*   eval\n    *   每个module会封装到eval里包裹起来执行，并且会在末尾追加注释，可以定位到JS Babel编译后代码\n    *   不用生成`.map`文件，包含映射信息相对较少\n*   source-map: 生成一个SourceMap文件，可以定位到JS编译前的代码（源代码文件），提供详细的信息\n*   cheap: 生成一个没有列信息（column-mappings）的`SourceMaps`文件，可以定位到编译后的代码\n*   module: 生成的sourcemap包含和loader相关的sourcemap信息，可以定位到源码\n*   inline: 将原本生成的`.map`文件的内容作为`DataURL（base64 形式）`嵌入`bundle`文件中，不单独生成 .map 文件\n*   hidden: 和source-map一样，但不会在bundle末尾追加注释，无法定位源代码和JS编译后代码位置\n*   nosources: 在能够保证文件路径可以准确建立映射的情况下，把`sourceContent`的内容给去除掉，使得`.map`文件体积能够更小一些\n\n| devtool                                 | 构建速度：build(初次构建)<br> rebuild(重新构建)     | 效果                                                                                  |\n| --------------------------------------- | -------------------------------------- | ----------------------------------------------------------------------------------- |\n| false                                   | build: fastest <br /> rebuild: fastest | 不开启source-map                                                                       |\n| eval                                    | build: fast <br /> rebuild: fastest    | 每个module会封装到eval里包裹起来执行，并且会在末尾追加注释，<br>可以定位到JS Babel编译后代码                           |\n| source-map                              | build: slowest <br /> rebuild: slowest | 生成一个SourceMap文件，<br>可以定位到JS编译前的代码（源代码文件）                                            |\n| hidden-source-map                       | build: slowest <br /> rebuild: slowest | 和source-map一样，但不会在bundle末尾追加注释，<br>无法定位源代码和JS编译后代码位置                                |\n| inline-source-map                       | build: slowest <br /> rebuild: slowest | 生成一个DataUrl形式的SourceMap文件，不会单独打包一个map文件，<br>可以定位到源代码                                |\n| eval-source-map                         | build: slowest <br /> rebuild: ok      | 每个module会通过eval（）来执行，并生成一个DataUrl形式的SourceMap，<br>可以定位到源代码                          |\n| cheap-source-map                        | build: ok <br /> rebuild: slow         | 生成一个没有列信息（column-mappings）的SourceMaps文件，<br>可以定位到JS Babel编译后代码                      |\n| cheap-module-source-map <br> （推荐开发过程使用） | build: slow <br /> rebuild: slow       | 生成一个没有列信息（column-mappings）的SourceMaps文件，<br>同时loader的sourcemap也被简化为只包含对应行的。可以定位到源代码 |\n\n上述表格列举了7个devtool值及其效果\n`sourcemap`除了映射规则，还需要解析工具才能将源代码和sourcemap规则真正进行映射，\n浏览器默认开启该功能，一般在设置-> 首选项-> 启用`JavaScript`源映射\n还可以通过异常监控系统（如：sentry）或者手动映射\n\n#### devServer\n\n[参考文档](https://juejin.cn/post/7147636643099312136)\n\n> 原理：devServer可以启动一个http服务，在webpack构建的时候，监听文件，如果文件发生变化，将会启动webpack的自动编译\n\ndevServe是webpack中重要的功能， 它可以让我们以`http`服务形式加载文件，更加贴合`生产环境`,提供`sourceMap`,开发时协助我们自动编译、自动刷新浏览器界面，从而提高我们的开发效率\n常用配置如下\n```\n    devServer: {\n    \tstatic: path.resolve(__dirname, "./dist"),\n    \t// 设置是否在服务器端进行代码压缩，以减少传输过程中的数据大小\n    \t// Accept-Encoding: gzip，说明服务器到客户端传输的过程中，文件是被压缩的,浏览器默认有解压缩功能，该功能现在默认开启\n    \tcompress: true,\n    \t// 自定义端口号\n    \tport: 3000,\n    \t// 添加响应头\n    \theaders: {\n    \t\t"X-Access-Token": "adfasdfa",\n    \t},\n    \tproxy: { // 配置代理\n    \t\t// "/api": "http://localhost:9000", // 直接代理\n    \t\t"/api": { // 使用对象，可以重写路径\n    \t\t\ttarget: "http://localhost:9000",\n                // 重写路径\n                pathRewrite: {\n                    "^/api":"/test",\n                },\n                // 确保请求主机名是target中的主机名\n                changeOrigin: true\n    \t\t}\n    \t},\n    \t// 改动不仅在内存，也写到硬盘上\n        devMiddleware: {\n          writeToDisk: true,\n        },\n        // 存在异常时，错误页面不在页面的最上层\n        client: {\n          overlay: false,\n        },\n    \thttps: true, // 是否开启https\n    \thttp2: true,  // 开启http2，可以使用https访问\n    \t// historyApiFallback: true // 异常时，回到历史中正确的页面，可以使用rewrites自定义页面\n    \thistoryApiFallback: {\n            rewrites: [\n                {from: /.*/, to: \'/error.html\'}\n            ]\n        },\n    \thost: \'0.0.0.0\' //开启服务器主机，同局域网内的同事也能访问\n    }\n\n    //package.json，\n    "scripts": {\n        "dev": "npx webpack", // 无serve打包，每次更改都需要执行\n        "serve": "npx webpack serve", // 使用serve实现自动局部更新\n        "serveOpen": "npx webpack serve --open" // --open，自动打开浏览器\n    },\n```\n常用的功能是port端口号和proxy代理，代理的配置可以直接写路径，也可以用对象重写路径等\n\n##### 模块热替换与热加载 HMR\n\ndevServer中热替换与热加载默认是开启的\n\n热替换: 开发过程中，只替换、添加、删除页面的某个模块，不影响其它模块，也无需重新加载整个页面\n```\n    devServer: {\n        // 默认开启，不需要设置，关闭改为false即可\n        hot: true, // 热替换(局部替换)\n    \tliveReload: false, // 热加载(页面刷新，关闭的话需要关闭hot)\n    },\n```\ncss通常不用处理，因为`style-loader`实现了`module.hot.accept`,自动实现热替换\nJS文件如果想要实现热替换，在JS引入的文件中加上以下代码，使用框架时框架已帮我们处理好了热替换，不需要加下面的代码\n```\n    if (module.hot) {\n        // 接受一个文件，当它变化时热替换，回调函数在热替换时执行\n        module.hot.accept("./input.js",() => {\n          ...\n        });\n    }\n\n    // 热替换浏览器的输出\n    [webpack-dev-server] App updated. Recompiling...\n    [webpack-dev-server] App hot update...\n    [HMR] Checking for updates on the server...\n    [webpack-dev-server] App hot update...\n    [HMR] Updated modules:\n    [HMR]  - ./input.js\n    [HMR] App is up to date.\n```\n#### ESLint\n\n团队开发中，ESLint是代码规范必不可少的工具，Eslint可以和VSCode插件搭配使用，也可以和webpack中配置提示\n\n本地安装ESLint\n```\n    npm install eslint  @eslint/create-config -D\n```\n和`webpack`需要`webpack.config.js`配置一样， ESLint也需要配置配置文件`.ellintrc`(.json.js等)，该文件可以使用指令生成\n\n```\nnpx eslint --init\n\n// 生成后的文件如下，rules中的非生成，是后续我加的\n{\n    "env": { // 指定脚本的运行环境\n        "browser": true, \n        "es2021": true\n    },\n    "extends": "airbnb-base",  // 扩展，使用了airbnb-base的ESLint扩展，比较严格\n    "parserOptions": { // 支持的JS语言选项\n        "ecmaVersion": "latest",\n        "sourceType": "module"\n    },\n    "rules": { // 规则，0为关闭\n        "linebreak-style": 0,\n        "import/no-import-module-exports": 0,\n        "import/extensions": 0,\n        "import/no-extraneous-dependencies": 0,\n        "no-console": 0\n    }\n}\n\n```\n\n该文件生成后，VScode插件`Eslint`等会自动读取该文件并对项目中的文件做检测，也可以用`npx eslint 文件夹\\文件名`指令进行检测\n\n配合webpack可以实现检测到的异常在控制台或者页面显示\n\n    npm i eslint-webpack-plugin -D\n\n    const HtmlWebpackPlugin = require("html-webpack-plugin");\n    const ESLintPlugin = require("eslint-webpack-plugin");\n\n    module.exports = {\n      mode: "development",\n      entry: "./src/app.js",\n      devServer: {\n        client: { // 该配置可以使异常不在document最上层弹出，只在控制台输出即可看到异常完成正常的调试\n          overlay: false,\n      },\n      plugin: [new HtmlWebpackPlugin(), new ESLintPlugin()],\n    };\n\n#### Git-hooks & husky\n\n> Git hook 是一种在 Git 版本控制系统中自动执行的脚本或命令。它们可以在特定的 Git 操作（例如提交代码、推送更改等）之前或之后执行，以实现一些自动化任务。\n\nGit hook 分为三种类型：\n\n*   提交钩子（Commit hooks）：在提交代码之前或之后执行。\n*   推送钩子（Push hooks）：在推送代码到远程仓库之前或之后执行。\n*   签出钩子（Checkout hooks）：在签出代码之前或之后执行。\n\n在 Git 仓库的 .git/hooks 目录中找到默认的 Git hook 文件。可以直接编辑这些文件来添加自己的脚本或命令执行代码检查或者代码格式化。\n通常使用GitHooks进行commit检查，检查是否符合对应的格式化要求，本篇章主要讲解husky，进行代码提交时的eslint校验\n[husky说明文档](https://www.npmjs.com/package/husky)\n按照说明文档依次执行如下\n```\n    // 安装\n    npm install husky --save-dev\n    // 使用npm指令进行初始化\n    npm pkg set scripts.prepare="husky install"\n    npm run prepare\n    // 添加提交前的ESlint检测\n    npx husky add .husky/pre-commit "npx eslint ./src"\n    git add .husky/pre-commit\n\n    后面进行commit就会校验是否符合ESLint规范了，不符合就commit不成功\n```\n关于Windows系统的异常`LF will be replaced by CRLF in **`\n`LF`和`CRLF`其实都是换行符，但是不同的是，LF是linux和Unix系统的换行符，CRLF是window 系统的换行符。git为了解决这个问题，提供了一个”换行符自动转换“的功能，并且这个功能是默认处于”自动模式“即开启状态的。\n这个换行符自动转换会把自动把你代码里 与你当前操作系统不相同的换行的方式 转换成当前系统的换行方式（即LF和CRLF 之间的转换），这样一来，当你提交代码的时候，即使你没有修改过某个文件，也被git认为你修改过了，从而提示"LF will be replaced by CRLF in \\*\\*\\*\\*\\*"\n\n解决办法就是关掉自动转换功能即可\n```\n    git config core.autocrlf false \n    git config --global core.autocrlf false  // 全局生效\n\n    // warning级别的警告可忽略，改配置在公司项目中需要谨慎修改\n```\n### webpack模块与解析原理\n\n#### 模块解析(resolve)\n\nwebpack通过Resolvers实现了模块之间的依赖和引用。举个例子:\n```\n    import _ from\'lodash\';\n    // 或者\n    const add = require(\'./utils/math\');\n```\n所引用的模块可以是来自应用程序的代码，也可以是第三方库。`resolver` 帮助 `webpack` 从每个`require/import` 语句中，找到需要引入到`bundle`中的模块代码。当打包模块时，webpack 使用`enhanced-resolve`来解析文件路径(webpack基于此进行treeshaking)。\n\n##### webpack中的模块路径解析规则\n\n通过内置的`enhanced-resolve`， `webpack`能解析三种文件路径:\n\n*   绝对路径\n```\n    import \'/home/me/file\';\n    import \'c:\\\\Users\\\\mellfile\';\n```\n由于已经获得文件的绝对路径，因此不需要再做进一步解析\n\n*   相对路径\n```\n    import \'../utils/regFetch\';\n    import \'./styles .css\';\n```\n这种情况下，使用 impot 或 require 的资源文件所处的目录，被认为是上下文目录。在`import/require`中给定的相对路径，`enhanced-resolve`会拼接此上下文路径，来生成模块的绝对路径`(path.resolve(_dirname, RelativePath)`\n\n*   模块路径\n```\n    import \'module;\'\n    import \'module/lib/file\'\n```\nnode\\_modules路径，在node\\_modules中寻找\n\n无论使用绝对路径还是相对路径，当代码过多，层级过多，都不方便引用某些非同级文件，此时我们可以使用`webpack`配置路径别名来实现文件的引用\n```\n    resolve: {\n        // 路径别名，@代表\'./src\'，引入\'./src/util/math\',可以简化为\'@/util/math\'\n        alias: {\n            \'@\': path.resolve(__dirname, \'./src\')\n        },\n        // 同名文件，配置加载顺序\n        extensions: [".json", ".js"],\n    },\n```\n`webpack`会自动帮我们处理文件后缀，所以引入文件不需要加`.js\\.json`,但出现同名文件，会有加载顺序的问题，\n我们可以使用`extensions`配置同名文件的加载顺序\n\n#### 外部扩展\n\n有些时候当我们为了减少`bundle`体积，把一些不变的第三方库用`cdn`的方式引入文档，可以用`webpack`的`externals`配置属性，实现外部扩展模块\n可以分别用手动引入和`wbpack`自动引入两种方式\n\n手动引入外部依赖，需要在模板`html`中引入`cdn`文件，使用的时候用`webpack`中配置的暴露出去的名字即可\n```\n    externals: {\n        // key: 与引用的包名一致\n        // value: script标签加载的对象所暴露出来的值\n        lodash: "_",\n    },\n\n    // app.js\n    import lodash from "lodash";\n    console.log($);\n\n    // index.html head中引入\n     <script src="https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js"><\/script>\n```\nwebpack配置自动引入，这种方式不需要html模板，webpack自动打包到生成的html中去\n```\n    // 定义外部资源引入的形式\n    externalsType: "script",\n    externals: {\n        lodash: [\n          // 数组第一项为cdn引用地址\n          "https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.min.js",\n          // 数组第二项为暴露的对象名\n          "_",\n        ],\n    },\n```\n#### 依赖图\n\n> 每当一个文件依赖另一个文件时，`webpack`会直接将文件视为依赖关系。这使得`webpack`可以获取非代码资源，如`images，fonts`等，并会它们作为依赖提供给应用程序。当`webpack`开始工作时，它会根据配置，从入口`entry`开始，`webpack`会递归地构建一个依赖关系图。这个依赖图包含着应用程序的每个模块，然后将所有模块打包为bundle（也就是output的配置项）\n\n我们可以用`webpack-bundle-analyzer`来分析`bundle`，将打包产物的依赖可视化和简单交互\n配置如下，使用`npm i`安装即可使用,\n```\n    const { BundleAnalyzerPlugin } = require("webpack-bundle-analyzer");\n    plugins: [\n        new HTMLWebpackPlugin(),\n        new BundleAnalyzerPlugin(),\n    ],\n```\n启动项目后会自动在本地启动8888的端口号展示依赖关系\n\n#### PostCSS与CSS模块\n\n部分样式存在浏览器兼容问题，需要根据不同的浏览器添加不同的前缀，这时我们可以用PostCSS\n\n`PostCSS` 是一个用 `JavaScript` 工具和插件转换 `CSS` 代码的工具。比如可以使用 `Autoprefixer` 插件自动获取浏览器的流行度和能够支持的属性，并根据这些数据帮我们自动的为`CSS`规则添加前缀，将最新的 `CSS` 语法转换成大多数浏览器都能理解的语法\n`Css` 模块可以实现给类名增加base64的hash值，解决命名冲突\n\n具体配置如下\n```\n    // 安装对应的包\n    npm i style-loader css-loader postcss-loader autoprefixer -D\n\n    // 新增postcss.config.js配置文件，配置内容如下\n    module.exports = {\n        plugins: [require(\'autoprefixer\')]\n    };\n    // package.json增加浏览器信息\n    "broeserslist": [ \n      "> 1%", // 份额大于 1% 的浏览器\n     "last 2 versions"\n    ]\n\n    // webpack配置\n    module: {\n        rules: [\n          {\n            test: /\\.(css|scss)$/,\n            use: [\n              \'style-loader\', \n              {\n                // css模块化\n                loader: \'css-loader\',\n                options: { \n                  modules: {\n                   // [path]:相对于webpack.config.js的绝对路径， [name]:文件名字，[local]:class类名， [hash]: base64随机值，可以设置位数\n                   // 通常只需要[local]_[hash:base64:6]即可满足需求\n                    localIdentName: \'[path]_[name]_[local]_[hash:base64:6]\',\n                  }, \n                  // css-loader前面有几个loader, 如果只有postcss-loader,值为1，如果还有sass-loader,值为2，依次类推\n                  importLoaders: 2 \n                },\n              },\n              {\n                loader: \'postcss-loader\',\n              },\n              \'sass-loader\',\n            ],\n          },\n        ],\n      },\n      需要注意点的点：rule中{ loader: \'postcss-loader\',},写法和\'postcss-loader\'作用等效，前者可以扩展更多的内容\n```\n当css为module，我们就可以以对象的方式使用css，如下\n```\n    import css from \'./index.css\';\n\n    let div = document.createElement(\'div\')\n    div.className=css.item\n    document.body.appendChild(div)\n\n    如果一些全局样式不想被css modules模式加载，可以使用:global，这样样式就不会被编译\n    :global(.item3){\n        width: 200px;\n        height: 200px;\n        background-color: blue;\n        display: flex;\n    }\n```\n#### web Works\n\n[MDN文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers)  [参考文章](https://zhuanlan.zhihu.com/p/117615638)\n\n> web works提供了后台处理线程的API，可以用来完成复杂耗时的工作，把它后台处理，让js线程不阻塞UI线程的渲染，避免浏览器被阻塞。\\*\\*webpack5内置了打包work.js的功能，会打包出“src\\_work\\_js.js"的文件\n\nweb works简单使用\n```\n    // app.js 创建worker线程\n    const worker = new Worker(new URL("./work.js", import.meta.url));\n    post("hello world");\n    // 通过postMessage发送事件，数据是可以结构化克隆的数据，在work线程结构化克隆数据副本拿到数据\n    function post(text) {\n    \tworker.postMessage({ text });\n    }\n    // 接受work线程发回的数据\n    worker.onmessage = (message) => {\n    \tconsole.log(message.data.answer);\n    \t// 终止线程，线程终止后再发送事件将得不到相应\n    \tworker.terminate();\n    };\n    // 监听异常\n    worker.onerror = (err) => {\n        worker.terminate();\n    \tconsole.log(err.filename, err.lineno, err.message); // 发生错误的文件名、行号、错误内容\n    }\n\n    // work.js\n    // 接受主线程发送的信息并发送信息\n    self.onmessage = (message) => {\n    \tself.postMessage({\n    \t\tanswer: message.data.text,\n    \t});\n    };\n```\n虽然使用worker线程不会占用主线程，但是启动worker会比较耗费资源\n\n主线程中使用XMLHttpRequest在请求过程中浏览器另开了一个异步http请求线程，但是交互过程中还是要消耗主线程资源\n\n#### TypeScript\n\n在前端生态里，TS扮演着越来越重要的角色。本小节简单介绍webpack工程环境集成TS，TS详细内容会分几个篇章具体介绍\n\n和其它的类型`loader`一样，`TS`配置对应的`loader`即可解析成浏览器能识别的`JS`文件\n```\n    // 安装\n    npm install --save-dev typescript ts-loader\n    // webpack配置\n    module: {\n    \trules: [\n    \t\t{\n    \t\t\ttest: /\\.ts$/,\n    \t\t\tuse: "ts-loader",\n    \t\t\texclude: /node_modules/, // 排除node_modules文件\n    \t\t},\n    \t],\n    },\n    resolve: {\n    \t// 自定义解析顺序，优先解析ts\n    \textensions: [".ts", ".js"],\n    },\n```\nTS需要在项目根目录下有配置文件才能是webpack配置生效\n```\n    // 使用ts自带的工具生成tsconfig.json\n    npx tsc --init\n    // 生成的配置中打开以下几项即可\n    {\n    \t"compilerOptions": {\n    \t\t"target": "es5" ,\n    \t\t"module": "es6",\n    \t\t"rootDir": "./src",                            \n    \t\t"jsx": "react",    \n    \t\t"sourceMap": true,\n    \t\t"outDir": "./dist" ,\n    \t}\n    }\n```\nTS项目需要注意的是项目中安装的依赖包都需要对应的声明文件，例如安装了`lodash`，也需要安装`@types/lodash`,\nnpmjs网站中搜索依赖包前面加上type基本就能找到对应的TS声明依赖包\n\ntsconfig.json常用配置及说明\n```\n{\n  "compilerOptions": {\n    "incremental": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度\n    "tsBuildInfoFile": "./buildFile", // 增量编译文件的存储位置\n    "diagnostics": true, // 打印诊断信息 \n    "target": "ES5", // 目标语言的版本\n    "module": "CommonJS", // 生成代码的模板标准\n    "outFile": "./app.js", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD",\n    "lib": ["DOM", "ES2015", "ScriptHost", "ES2019.Array"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",\n    "allowJS": true, // 允许编译器编译JS，JSX文件\n    "checkJs": true, // 允许在JS文件中报错，通常与allowJS一起使用\n    "outDir": "./dist", // 指定输出目录\n    "rootDir": "./", // 指定输出文件目录(用于输出)，用于控制输出目录结构\n    "declaration": true, // 生成声明文件，开启后会自动生成声明文件\n    "declarationDir": "./file", // 指定生成声明文件存放目录\n    "emitDeclarationOnly": true, // 只生成声明文件，而不会生成js文件\n    "sourceMap": true, // 生成目标文件的sourceMap文件\n    "inlineSourceMap": true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中\n    "declarationMap": true, // 为声明文件生成sourceMap\n    "typeRoots": [], // 声明文件目录，默认时node_modules/@types\n    "types": [], // 加载的声明文件包\n    "removeComments":true, // 删除注释 \n    "noEmit": true, // 不输出文件,即编译后不会生成任何js文件\n    "noEmitOnError": true, // 发送错误时不输出任何文件\n    "noEmitHelpers": true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用\n    "importHelpers": true, // 通过tslib引入helper函数，文件必须是模块\n    "downlevelIteration": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现\n    "strict": true, // 开启所有严格的类型检查\n    "alwaysStrict": true, // 在代码中注入\'use strict\'\n    "noImplicitAny": true, // 不允许隐式的any类型\n    "strictNullChecks": true, // 不允许把null、undefined赋值给其他类型的变量\n    "strictFunctionTypes": true, // 不允许函数参数双向协变\n    "strictPropertyInitialization": true, // 类的实例属性必须初始化\n    "strictBindCallApply": true, // 严格的bind/call/apply检查\n    "noImplicitThis": true, // 不允许this有隐式的any类型\n    "noUnusedLocals": true, // 检查只声明、未使用的局部变量(只提示不报错)\n    "noUnusedParameters": true, // 检查未使用的函数参数(只提示不报错)\n    "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)\n    "noImplicitReturns": true, //每个分支都会有返回值\n    "esModuleInterop": true, // 允许export=导出，由import from 导入\n    "allowUmdGlobalAccess": true, // 允许在模块中全局变量的方式访问umd模块\n    "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入\n    "baseUrl": "./", // 解析非相对模块的基地址，默认是当前目录\n    "paths": { // 路径映射，相对于baseUrl\n      // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置\n      "jquery": ["node_modules/jquery/dist/jquery.min.js"]\n    },\n    "rootDirs": ["src","out"], // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错\n    "listEmittedFiles": true, // 打印输出文件\n    "listFiles": true// 打印编译的文件(包括引用的声明文件)\n  }\n}\n```\n\n#### 多页面环境搭建\n\n部分情况为了网站更好的SEO，我们需要搭建多页面应用，\n\n多页面应用需要注意点有几个点，多入口(共同依赖声明)、自定义html模板、公共chunk抽离与引用等，基本配置如下\n```\n    module.exports = {\n      entry: {\n        // 使用对象的方式定义入口，而不是\'./src/index.js\'这样的字符串，可配置更多内容\n        main: {\n          // 将多个文件打包合成一个文件\n          import: [\'./src/app1.js\', \'./src/common.js\'],\n          // 声明依赖\n          dependOn: \'lodash\',\n          // 输出到page1文件夹下\n          filename: \'page1/[name].js\'\n        },\n        main2: {\n          import: [\'./src/app2.js\', \'./src/common.js\'],\n          dependOn: \'lodash\',\n          filename: \'page2/[name].js\'\n        },\n        // 第三方库依赖\n        lodash: {\n          import: \'lodash\',\n          filename: \'common/[name].js\'\n        },\n      },\n      plugins: [\n        new HTMLWebpackPlugin({\n          template: \'./index.html\', // html模板\n          // title: 页面的title，在html模板中可以使用 <title><%= htmlWebpackPlugin.options.title %></title> ejs语法可以接收到title的值\n          title: \'页面1\', \n          inject: \'body\', // 生成的JS标签注入到body标签里\n          // 注入chunk main和lodash这两个, entry入口的key值\n          chunks: [ \'main\', \'lodash\' ],\n          // 生成的文件为index.html, 在page1文件夹下\n          filename: \'page1/index.html\'\n        }),\n        new HTMLWebpackPlugin({\n          template: \'./index.html\',\n          title: \'页面2\',\n          inject: \'body\',\n          chunks: [ \'main2\', \'lodash\'],\n          filename: \'page2/index.html\'\n        })\n      ],\n      output: {\n        // chunk输出文件夹\n        path: path.resolve(__dirname, \'./dist\'),\n        clean: true,\n        // chuank输出文件名，在入口配置fileName后该配置就不生效了\n        filename: \'[name]_bounder.js\',\n      },\n      devtool: \'cheap-module-source-map\',\n      mode: \'development\', // development / production\n      devServer: {\n        client: {\n          overlay: false,\n        },\n        static: path.resolve(__dirname, \'./dist\'),\n        compress: true,\n        // 自定义端口号\n        port: 3000,\n      },\n    };\n```\n入口文件可以使用对象的方式，每个`chunk`都可以加载多个文件，每个`html`又可以自定义加载多个`chunk`\n使用`dependOn`还可以声明公共依赖的的库，还可以使用`splitChunks`自动识别功能模块抽离单独`chunk`，在基础篇有详细介绍\n\n可以使用一个`html`模板生成不同的`html`文件，一些变量可以用`ejs`语法承接，例如`title`可以使用\n`<title><%= htmlWebpackPlugin.options.title %></title>`来承接`webpack`配置中的`title`\n\n#### Tree Shaking [官方文档](https://www.webpackjs.com/guides/tree-shaking/) [参考文档](https://juejin.cn/post/7105022295474700295)\n\n> `tree shaking`用于描述移除`JavaScript`上下文中的未引用代码(dead-code)。它依赖于`ES2015`模块语法的`静态结构`特性，例如`import`和`export`\n\n在`Webpack5`中，`Tree Shaking`在生产环境下默认启动(mode: production)。如果想在开发环境启动`Tree Shaking`，配置如下\n```\n    // webpack.config.js，配置文件\n    optimization: {\n        usedExports: true\n    }\n```\n使用`Tree Shaking`前提是基于`ES6`编写的程序，基于`CommonJS、AMD、CDM`等模块化方案，因为导入导出是动态难以预测，只要引入无论用还是不用，都不会被删除，可以搭配插件`babel-plugin-import`引入模块实现类似的功能\n\n我们编写`util`文件，暴露出`add`和`minu`两个方法，在`app.js`引入，并使用`add`方法，实际打包后如下，\n```\n    "use strict";\n    /* harmony export */ __webpack_require__.d(__webpack_exports__, {\n    /* harmony export */   add: () => (/* binding */ add)\n    /* harmony export */ });\n    /* unused harmony export minu */\n    const add = (a, b) => {\n    \treturn a + b;\n    };\n\n    const minu = (a, b) => {\n    \treturn a - b;\n    };\n```\n`webpack`会在编译过程启动标记功能，未使用的标记为unused\\`，在生成产物时，被标记的变量及对应的代码块被删除\n\n##### sideEffects\n\n因为webpack默认生产开启`Tree Shaking`,所以如果`import **.css`就会被摇掉，为此我们可以搭配`sideEffects`告知那些文件忽略副作用\n```\n    "sideEffects": true，所有的代码都是有副作用的\n    "sideEffects": false，所有的代码都是没有副作用的\n    "sideEffects": []，自定义哪些文件是有副作用的\n\n    // package.json配置\n    "sideEffects": ["*.css", "*.global.js"],\n```\n#### PWA(渐进式网页应用)\n\n本篇只做简短介绍，详细介绍在PWA章节中\n\n需要用到插件workbox-webpack-plugin，webpack配置如下\n\n```\nconst WorkboxPlugin = require("workbox-webpack-plugin");\nplugins: [\n    new WorkboxPlugin.GenerateSW({\n      // 快速启动 ServiceWorkers\n      clientsClaim: true,\n      // 不允许遗留旧的ServiceWorkers\n      skipWaiting: true,\n    }),\n]\n\n```\n\n该插件的作用创建`work box`，打包生成`service-worker.js`和`workbox.哈希值.js`文件，前者是主文件，后者是被引用的文件。在浏览器注册`service worker`后即可使用\n\n在`app.js`注册\n```\n    // 判断是否支持service worker\n    if ("serviceWorker" in navigator) {\n    \tconsole.log("enter");\n    \twindow.addEventListener("load", () => {\n    \t\t// 返回的是个注册成功的promise对象\n    \t\tnavigator.serviceWorker\n    \t\t\t.register("/service-worker.js")\n    \t\t\t// 引用打包后生成的文件\n    \t\t\t.then((registration) => {\n    \t\t\t\tconsole.log("注册成功", registration);\n    \t\t\t})\n    \t\t\t.catch((registrationError) => {\n    \t\t\t\tconsole.log(registrationError);\n    \t\t\t});\n    \t});\n    }\n```\n注册`service-worker`成功后，关闭服务，页面也能正常访问\n可以在chrome://serviceworker-internals/ 这个页面看到注册的线程，取消掉就不能离线访问了\n\n#### Shimming 预置依赖 [官方文档](https://webpack.docschina.org/guides/shimming/)\n\n当一些第三方库引入全局依赖，例如`jQuery中的$`, `lodash中的_`,这些不符合规范的模块，可以使用`shimming`配置全局使用\n注：webpack理念是模块化， 正常情况不推荐使用全局变量\n\nshimming另一个作用配置polyfill的按需加载\n\n##### 使用Provide插件配置全局变量\n```\n    const webpack = require("webpack");\n    plugins: [\n        new webpack.ProvidePlugin({\n        \t// 不用引入就可以全局使用_ 从而使用lodash的方法\n        \t_: "lodash",\n        \t// 全局使用lodash的join方法\n        \tjoin: ["lodash", "join"],\n        }),\n    ]\n    // 在全局可以不用引入lodash就使用"_"\n```\n##### 细粒度shimming 配置全局window [配置参考](https://webpack.docschina.org/loaders/imports-loader/)\n\n一些遗留模块依赖的`this`指向的是`window`对象，模块运行在`commonJS`上下文，`this`指向`module.exports`,可通过`imports-loader`覆盖this指向\n```\n    rules: [\n    \t{\n    \t\t// 将this 指向window\n    \t\t// test: require.resolve("./src/app.js"), // Node.js 函数, 文件的绝对路径\n    \t\t// use: ["imports-loader?wrapper=window"],\n    \t\ttest: /\\.js$/,  // 使用正则匹配所以JS文件\n    \t\tuse: [{\n    \t\t\tloader: \'imports-loader\',\n    \t\t\toptions: {\n    \t\t\t\ttype: \'commonjs\', // module|commonjs\n    \t\t\t\twrapper: \'window\'\n    \t\t\t},\n    \t\t}]\n    \t},\n    ]\n```\n##### 全局exports [配置参考](https://webpack.docschina.org/loaders/expose-loader/)\n\n某个文件创建但是未导出的方法、变量，可使用该方法配置从而可以引用\n```\n    rules: [\n        {\n        \t// global.js未导出方法，可以使用改配置导出globals中的方法，可以用于一些第三方未导出的依赖包\n        \ttest: require.resolve("./src/globals.js"),\n        \t// 使用字符串到处global.js 中的file变量，helper对象的parse方法\n        \t// use: "exports-loader?type=commonjs&exports=file,multiple|helpers.parse|parse",\n        \t// 使用对象方式配置导出变量与方法\n        \tuse: [{\n        \t\tloader: \'exports-loader\',\n        \t\toptions: {\n        \t\t\ttype: \'commonjs\', // module|commonjs\n        \t\t\texports: [\n        \t\t\t\t\'file\', \n        \t\t\t\t\'multiple helpers.parse parse\',\n        \t\t\t]\n        \t\t},\n        \t}]\n        },\n    ]\n\n    // 使用，正常导入模块使用\n    const { file, parse } = require(\'./globals.js\');\n```\n##### polyfill 垫片\n\n当需要兼容低版本浏览器，代码中使用的`ES6`及以上的新语法，就得使用`polyfill`将新语法兼容成低版本浏览器可以识别的方法\n1、简易使用 （不建议）\n```\n    // @babel/polyfill 最近一次更新已是三年前，不建议使用，简易使用 core.js\n    npm install @babel/polyfill -D\n    // 可以直接在主文件引入，会打包到主bundle中，这样就能兼容低版本浏览器了,\n    import \'@babel/polyfill\'\n\n    // 会引入整个polyfill包，体积大切污染全局环境\n```\n2、core.js\n可以配置按需加载，可以设置`browserlist`转译主流浏览器不支持的特性\nwebpack配置如下\n```\n    npm install core-js@3 babel-loader @babel/core @babel/preset-env -D\n\n    rules: [\n    \t{\n    \t\ttest: /\\.js$/,\n    \t\texclude: /node_modules/,\n    \t\tuse: {\n    \t\t\tloader: "babel-loader",\n    \t\t\toptions: {\n    \t\t\t\tpresets: [\n    \t\t\t\t\t[\n    \t\t\t\t\t\t"@babel/preset-env",\n    \t\t\t\t\t\t{\n    \t\t\t\t\t\t\ttargets: ["last 1 version", "> 1%"],\n    \t\t\t\t\t\t\tuseBuiltIns: "usage",\n    \t\t\t\t\t\t\tcorejs: 3,\n    \t\t\t\t\t\t},\n    \t\t\t\t\t],\n    \t\t\t\t],\n    \t\t\t},\n    \t\t},\n    \t},\n    ],\n```\n#### library npm包\n\n我们通过`npm`所安装的依赖，可以通过`webpack`进行打包，使用`npm`发布，这样别人也可以安装我们的`npm`包\n\n只需要在`output`设置`library`即可, 配置如下\n```\n    const path = require("path");\n    module.exports = {\n    \tentry: {\n    \t\tapp: "./src/app.js",\n    \t},\n    \t// library type为module时，及ES6，需要设置experiments属性\n    \t// experiments: {\n    \t// \toutputModule: true\n    \t// },\n    \toutput: {\n    \t\tpath: path.resolve(__dirname, "./dist"),\n    \t\tfilename: "qing_util.js",\n    \t\tclean: true,\n    \t\tlibrary: {\n    \t\t\tname: "qing_util",\n    \t\t\t// type取值\n    \t\t\t// window: 导出的方法挂载在window上，qing_util是全局的\n    \t\t\t// commonjs: 编译后在node环境下使用\n    \t\t\t// module: 可以使用ES6方式导入，实验性的属性，需要配置experiments，并设置outputModule为true\n    \t\t\t// umd: 支持commonJS 与 JS标签引入，对ES module支持不完善\n    \t\t\ttype: "umd",\n    \t\t},\n    \t\tglobalObject: "globalThis", // 解决commonJS环境 self问题\n    \t},\n    \tmode: "production", // development / production\n    \texternals: {\n    \t    // 第三方依赖不打包进boundle中\n    \t\tlodash: {\n    \t\t\tcommonjs: "lodash",\n    \t\t\tcommonjs2: "lodash",\n    \t\t\tamd: "lodash",\n    \t\t\troot: "_", \n    \t\t},\n    \t},\n    };\n```\n需要注意的是，当我们有一些第三方包不想打包进`boundle`中，并告知宿主自己需要安装，这时我们可以将依赖放到`package`中的`peerDependencies`\n这样别人在下载我们的包的时候，也会把`peerDependencies`中的包下载，就像`antd`组件库，默认你是有`react`相关的包，不需要打包近组件库中\n\n打完包需要发布有以下步骤，前置条件时需要在npmjs上注册账号\n```\n    npm config get registry\n    // npm 源地址需要是npmjs，可通过nrm 更换\n    npm config set registry http://registry.npmjs.org \n    // 设置账号\n    npm adduser\n    // 将package中的main入口改为打包后的入口文件\n    {\n      "main": "dist/qing_util.js",\n    }\n    // 发布\n    npm publish\n```\n#### module federation 模块联邦\n\n> 每个构建都充当一个容器，也可将其他构建作为容器。通过这种方式，每个构建都能够通过从对应容器中加载模块来访问其他容器暴露出来的模块。\n\n模块联邦就是可以使用别的应用暴露出来的模块，不同于NPM依赖包，每次更改都要升级，模块联邦可以加载最新的暴露出来的模块，只需要加载的模块地址不变即可\n\n一个应用既可以引用别的模块暴露出来的模块，也可以暴露出去模块，所使用的是`webpack`自带的插件`ModuleFederationPlugin`\n\n引用模块: `remotes`，key为模块name，值为name+访问地址，即定义的fileName\n暴露模块: `exposes`, 向外暴露模块， key为访问路径，值为模块路径\n\n具体案例如下 [源码地址](https://github.com/Loneolf/practice/tree/master/webpack/moduleFederation)\n```\n    // 引入模块邦联模块\n    const { ModuleFederationPlugin } = require(\'webpack\').container\n\n    plugins: [\n        new ModuleFederationPlugin({\n          // 导出的Name\n          name: \'home\',\n          文件名称\n          filename: \'remoteHome.js\',\n          exposes: {\n            // 导出的模块\n            \'./List\': \'./src/List.js\'\n          },\n          remotes: {\n            // 引入别的模块\n            nav: \'nav@http://localhost:3003/remoteNav.js\'\n          },\n          shared: {},\n        })\n    ]\n\n    // search项目导入home模块如下\n    new ModuleFederationPlugin({\n      name: \'search\',\n      filename: \'remoteSearch.js\',\n      exposes: {},\n      remotes: {\n        // 引入home模块，name + 线上的文件名， key为home模块的name\n        home: \'home@http://localhost:3002/remoteHome.js\'\n      },\n      shared: {},\n    })\n    使用如下\n    import(\'nav/Header\').then(...)\n\n```'}}]);
//# sourceMappingURL=904.chunk.js.map