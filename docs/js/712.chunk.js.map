{"version":3,"file":"js/712.chunk.js","mappings":"sIAAA,20f","sources":["webpack://source-map/./src/mds/webpack/1webpack-基础篇.md"],"sourcesContent":["export default \"### 概念\\n> webpack 是前端资源构建工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles。\\n在 Webpack 看来，前端的所有资源文件 ( js / json / css / img / less / … ) 都会作为模块处理，它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源 ( bundles )。\\n[代码地址](https://bgithub.xyz/Loneolf/practice/tree/master/webpack)\\n### webpack基本使用\\n##### 安装webpack\\n```\\nnpm i webpack webpack -cli --global // 全局安装\\nnpm install webpack webpack-cli --save-dev //本地安装webpack及webpack-cli\\nwebpack -v // 使用该指令验证版本，正常显示版本即安装成功\\n```\\n##### webpack命令行运行\\nwebpack可以使用命令行编译文件，如下\\n```\\nnpx webpack --entry ./index.js --mode production \\n// 该指令会寻找当前目录下index.js，自动编译，并在当前目录生成dist文件夹，编译后的文件为main.js\\n// 通过指令使用webpack不方便也不利于配置，通常使用配置文件\\n```\\n##### webpack基本配置\\n> webpack运行在node中，所以需要commentJS导入导出，配置文件名必须为webpack.config.js，webpack自动读取\\n\\nentry: 入口文件\\noutput: 打包文件\\nmode: 模式 // development:开发模式，production:生产模式\\ndevtool: 'inline-source-map' // 异常时精准定位到错误的行\\nplugins: 插件配置集合\\ndevServer: 开启本地服务器，使用指令 npx webpack-dev-server启动，在本地启动8080的服务端口，热更新\\n```\\n// 文件名必须为webpack.config.js，webpack自动读取\\n// 在node.js中运行，所以必须用commentJS导入导出\\nconst path = require('path')\\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\\n\\nmodule.exports = {\\n    entry: './src/index.js',\\n    output: {\\n        filename: 'bounder.js',\\n        path: path.resolve(__dirname, './dist'),\\n        // __dirname相当于找到当前文件夹的绝对路径， './dist'从当前文件夹的绝对路径找到相对路径dist\\n        clean: true, \\n        // 生成的文件目录清除冗余的文件，不清除plugins生成的文件\\n        // 不使用箭头函数和const\\n\\t\\tenvironment: {\\n\\t\\t\\tarrowFunction: false,\\n\\t\\t\\tconst: false,\\n\\t\\t},\\n    },\\n    mode: 'development', \\n    // development:开发模式\\n    devtool: 'inline-source-map',\\n    // 异常时， 显示源文件代码具体位置，而非打包后文件异常位置\\n    plugins: [\\n        new HTMLWebpackPlugin({\\n            template: './index.html', // 以该文件为模板生成HTML\\n            filename: 'app.html', // 生成的文件名称\\n            inject: 'body', // script标签放在哪个标签里面，默认放在head标签中\\n        })\\n    ],\\n    devServer: {\\n        static: './dist'\\n        // 使用指令 npx webpack-dev-server启动，在本地启动8080的服务端口\\n        // 本质是将输出后的bounder.js文件放在内存中，删除本地的bounder.js文件并不会影响开发调试\\n    }\\n}\\n// 使用npx webpack 增加--watch去编译文件，实时检测文件改动\\n```\\n上面案例中的HTMLWebpackPlugin插件，需要本地安装后才可使用`npm install webpack-dev-server -D`\\n\\n### 资源模块 asset module\\n> 资源模块 是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader，\\n\\n##### 在JS通过import进行导入或者css中引入的文件会被资源模块自动加载处理\\n\\n```\\n// ./src/index.js \\nimport img1 from '../img/1.png'\\nimport img2 from '../img/safe.svg'\\nimport img3 from '../img/2.jpg'\\nimport tc from './text.txt'\\nconst text = document.createElement('div')\\ntext.textContent = tc\\ntext.classList.add('textContent')\\ntext.style.cssText = 'width: 200px;height:200px;background: #ccc;'\\napp.appendChild(text)\\ndocument.body.classList.add('body')\\n\\nconst imgdom = document.createElement('img')\\nimgdom.src = img1\\napp.appendChild(imgdom)\\n\\nconst imgdom2 = document.createElement('img')\\nimgdom2.src = img2\\napp.appendChild(imgdom2)\\n\\nconst imgdom3 = document.createElement('img')\\nimgdom3.src = img3\\napp.appendChild(imgdom3)\\n\\nconsole.log('aaa2333', img3)\\n```\\n\\n##### 资源模块类型\\nasset/resource：发送一个单独的文件并导出 URL\\nasset/inline：导出的资源为 Data URL base64格式，不在dist文件夹\\nasset/source：导出资源的源代码\\nasset：自动根据文件大小生成资源或者base64的url，默认值为8K 4*1024，即大于8K为resource效果，小于8k为inline效果，该值可使用parser自定义maxSize\\n\\nassetModuleFilename: 指定输出路径和文件名称\\n```\\nmodule.exports = {\\n    output: {\\n       ...\\n        assetModuleFilename: 'images/[name]_[contenthash][ext]' // images/test.png\\n        // 可以指定输出路径和文件名称，\\n        // name:文件本身的名称，contenthash:生成的hash值, ext:文件原本的类型\\n    },\\n  ...\\n  module: {\\n    rules: [\\n        {\\n            test: /\\\\.png$/, // 用正则匹配以png为结尾的资源\\n            type: 'asset/resource', // 打包资源文件，输出对应文件\\n            generator: {\\n                filename: 'images/[name]_[contenthash][ext]'\\n            }\\n            // generator优先级高于output中的assetModuleFilename\\n        },\\n        {\\n            test: /\\\\.svg$/, // 用正则匹配以svg为结尾的资源\\n            type: 'asset/inline',\\n            // asset/inline, 将资源打包成data URL base64格式的数据\\n        },\\n        {\\n            test: /\\\\.txt$/, // 用正则匹配以txt为结尾的资源\\n            type: 'asset/source',\\n            // asset/source, 打包出资源的源代码\\n        },\\n        {\\n            test: /\\\\.jpg$/, // 用正则匹配以jpg为结尾的资源\\n            type: 'asset',\\n            // asset 自动根据文件大小生成资源或者base64的url，默认值为8K 4*1024\\n            parser:{\\n                dataUrlCondition:{\\n                    maxSize: 4 * 1024 * 1024\\n                }\\n            }\\n        },\\n    ]\\n  }\\n}\\n```\\n\\n### 资源处理\\n\\n##### webpack-loader\\n项目中我们import的css\\\\scss\\\\less,或者images图像，fonts字体，以及生成怎样的html，这些资源的处理及生成我们需要用webpack-loader机制。\\n简而言之，webpack可以解析js,json文件，但是其它类型的文件，css,html,sass,images,字体等，需要对应的loader去处理转化为有效的模块\\n\\n#### HTML资源\\n插件: `html-webpack-plugin`, 下载`npm i html-webpack-plugin - D`\\n\\n在上面的基本配置中我们使用了该插件，使用如下\\n```\\n// 引入插件\\nconst HTMLWebpackPlugin = require('html-webpack-plugin')\\n\\nmodule.exports = {\\n    plugins: [\\n        new HTMLWebpackPlugin({\\n            template: './index.html', // 以该文件为模板生成HTML\\n            filename: 'app.html', // 生成的文件名称\\n            inject: 'body', // script标签放在哪个标签里面，默认放在head标签中\\n        })\\n    ],\\n}\\n```\\n我们可以自定义输出内容，文件模板，生成的JS注入到哪个标签(默认放在head中)\\n\\n#### css资源相关\\n> 处理css相关资源，用Test正则匹配文件，使用use加载对应的loader去处理匹配到的文件\\nuse 支持链式调用，如果是数组，从后往前执行，依次将产物给前一个loader去执行\\n\\n```\\nimport './css/style.css'\\nimport './css/style.less'\\nimport './css/style.scss'\\n```\\n如果我们在js中引入上面的文件，需要配置相应的loader才能让css样式生效\\n\\n##### js中`import './css/style.css'`\\n使用`css-loader`处理引入的css，但是这一步并不会生效，因为样式没有生成到style中或者css文件中\\n所以需要`style-loader`，将css生成到head中的style标签中\\n或者`MiniCssExtractPlugin.loader`,抽离css生成文件，并生成link标签在head标签中\\n在plugins初始化`MiniCssExtractPlugin`插件，可以自定义文件名，文件生成目录\\n\\n##### less文件或者sass文件\\n需要先通过`less-loader`或者`sass-loader`将less文件、sass文件转化为css文件，后面的链式处理等同于处理css文件\\n\\n##### css文件压缩\\n`MiniCssExtractPlugin`生成的css文件并非压缩文件，我们需要在优化中压缩css文件，下面配置中的`optimization`为优化配置\\n需要注意的是该配置生效必须在生产模式下\\n```\\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\\n// 该loader仅在webpack5下可使用\\nconst CssMinimizerWebpakPlugin = require('css-minimizer-webpack-plugin')\\nmodule.exports = {\\n  ...\\n  mode: 'production', // 生产模式，在该模式下代码压缩才生效\\n  plugins: [\\n        // 生成css文件，并生成link标签链接生成的文件\\n        new MiniCssExtractPlugin({ // 默认生成main.css\\n            filename: 'style/[contenthash].css' // 生成的文件放在dist/style目录下，文件名为hash值\\n        }),\\n    ],\\n  module: {\\n    rules: [\\n        {\\n           test: /\\\\.(css|scss)$/, // /\\\\.(css|less)$/\\n           // use: ['style-loader', 'css-loader'], // 处理css文件的loader\\n            // use: ['style-loader', 'css-loader', 'less-loader'], // 编译less文件的loader\\n            // use: ['style-loader', 'css-loader', 'sass-loader'], // 编译sass文件的loader\\n            // use 支持链式调用，如果是数组，从后往前执行，依次将产物给前一个loader去执行\\n            less-loader和sass-loader将less、scss文件编译为css，css-loader处理js文件引入，style-loader将css生成到head中的style标签里\\n            use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']\\n            // MiniCssExtractPlugin.loader，与style-loader不同的是抽离css并生成css文件，通过link标签使css生效\\n        ]\\n      }\\n    ]\\n  },\\n  optimization: {\\n        minimizer:[\\n            new CssMinimizerWebpakPlugin() // css优化，压缩css文件\\n            // 仅在production模式下生效\\n        ]\\n    }\\n}\\n```\\n以上需要安装的插件如下\\n```\\ncss-loader\\nstyle-loader\\nless\\nless-loader\\nnode-sass\\nsass-loader\\ncss-minimizer-webpack-plugin\\nmini-css-extract-plugin\\n```\\n\\n#### 加载字体资源 @font-face\\n> 加载字体`webpack`自带的`asset/resource`即可\\n\\n```\\n@font-face {\\n    font-family: 'qingIcon';\\n    src:url('fonts/icomoon.eot'); /* IE9*/\\n    src:url('fonts/icomoon.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\\n    url('fonts/icomoon.svg#icomoon') format('svg'), /* iOS 4.1- */\\n    url('fonts/icomoon.woff2') format('woff2'),\\n    url('fonts/icomoon.woff') format('woff'), /* chrome、firefox */\\n    url('fonts/icomoon.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\\n    font-weight: 400;\\n    font-style: normal;\\n}\\n.icon {\\n\\tfont-family: \\\"qingIcon\\\";\\n\\tfont-size: 40px;\\n\\tcolor: yellowgreen;\\n}\\n// js中使用\\nconst spanDom = document.createElement('span')\\nspanDom.classList.add('icon')\\nspanDom.innerHTML='&#x7231;'\\n```\\nwebpack配置\\n```\\n...\\nmodule: {\\n        rules: [\\n           ...\\n            {\\n                test: /\\\\.(woff|woff2|ttf|otf|eot)$/,\\n                type: 'asset/resource'\\n            }\\n        ]\\n    },\\n```\\n#### 数据资源 CSV、TSV、XML、json、yml、toml\\n加载数据资源需要使用对应的loader来进行加载，最终生成json数据来进行使用，对应依赖和配置如下\\n```\\nnpm i csv-loader xml-loader json toml yaml -D\\n```\\nwebpack配置\\n```\\n...\\nmodule: {\\n        rules: [\\n           ...\\n            {\\n                test: /\\\\.(csv|tsv)$/,\\n                use: \\\"csv-loader\\\",\\n            },\\n            {\\n                test: /\\\\.xml$/,\\n                use: \\\"xml-loader\\\",\\n            },\\n            {\\n                test: /\\\\.toml$/,\\n                type: \\\"json\\\",\\n                parser: {\\n                  parse: toml.parse,\\n                },\\n            },\\n            {\\n                test: /\\\\.yaml$/,\\n                type: \\\"json\\\",\\n                parser: {\\n                  parse: yaml.parse,\\n                },\\n            },\\n            {\\n                test: /\\\\.json$/,\\n                type: \\\"json\\\",\\n                parser: {\\n                  parse: json.parse,\\n                },\\n            },\\n        ]\\n    },\\n```\\n\\n#### JS编译\\nwebpack并不会对ES6代码进行编译，打包后依然是ES6代码，如果项目需要兼容低版本浏览器，需要相关的loader将ES6编译成ES5\\n```\\nnpm install babel-loader @babel/core @babel/preset-env @babel/runtime @babel/plugin-transform-runtime -D\\n```\\n\\n- babel-loader: 在Webpack里应用babel解析ES6的桥梁\\n- @babel/core: babel核心模块\\n- babel/preset-env: babel预设，一组babel插件的集合\\n- babel/runtime: 运行在运行时，被引入的模块会被打包到最终产物里\\n- @babel/plugin-transform-runtime: 转译代码，转译后的代码可能引入`babel/runtime`中的模块，运行在编译时，该插件是转译babel不转译的新API\\n    - 自动polyfill es5不支持的特性，这些polyfill包在babel-runtime包中（core-js 、regenerator等）\\n\\n```\\n...\\nmodule: {\\n        rules: [\\n           ...\\n           {\\n\\t\\t\\t\\ttest: /\\\\.js$/,\\n\\t\\t\\t\\texclude: /node_modules/, // 排除node_modules中的库\\n\\t\\t\\t\\tuse: {\\n\\t\\t\\t\\t\\tloader: \\\"babel-loader\\\", // 加载loader\\n\\t\\t\\t\\t\\toptions: {\\n\\t\\t\\t\\t\\t\\tpresets: [\\\"@babel/preset-env\\\"], // 配置预设\\n\\t\\t\\t\\t\\t\\tplugins: [[\\\"@babel/plugin-transform-runtime\\\"]],\\n\\t\\t\\t\\t\\t\\t// 全自动的，不会污染全局 API。\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n        ]\\n    },\\n```\\nbable相关的配置还可以抽离到 .babelrc文件中或者babel.config.js\\n#### JS 压缩\\n同CSS生产环境需要压缩一样，JS代码生产环境压缩同样需要JS压缩插件\\n```\\nnpm install terser-webpack-plugin -D\\n// config中配置在optimization的minimizer中，只需要再生产环境配置即可\\nconst Terser = require(\\\"terser-webpack-plugin\\\");\\noptimization: {\\n      minimizer: [\\n        new TerserPlugin()\\n    ],\\n},\\n```\\n\\n小结：通过webpack Loader机制，我们可以让webpack处理js、json以外的资源文件，从而转化为有效的资源模块\\n\\n### 代码分离\\n当项目大到一定程度，或者某些依赖库不希望跳转个页面就重复的完全加载，我们就需要进行代码分离，或者配置按需加载、懒加载、预加载等优化点\\n\\nwebpack可以将代码分离到不同的文件中，然后将文件按需加载或者并行加载，同时获取代码加载优先级等\\n\\n常用代码分离通常如下\\n- 多入口配置：使用entry配置，手动地分离代码。\\n- 公共代码分离提取：在入口使用entry dependencies或者SplitChunkPlugin去重和分离代码。\\n- 动态导入：通过模块的内联函数import调用来分离代码\\n\\n#### 多入口配置\\n\\n多入口配置需要同时更改入口和输出，输出可使用[name]自动输出对应的文件，并使用[contenthas]生成hash值\\n\\n多入口配置的缺点是不同的文件引入同一个包也会重复的打包进对应的文件，造成重复加载，所以需要进行公共代码提取\\n```\\nentry: {\\n\\t// // 多入口文件\\n\\tindex: \\\"./src/index.js\\\",\\n\\tlodashDeepLog: \\\"./src/lodashLog.js\\\",\\n}\\noutput: {\\n\\t// [name] 文件本身名称, [contenthash] hash值\\n\\tfilename: \\\"[name]_[contenthash]_bounder.js\\\",\\n}\\n```\\n#### 公共代码分离提取\\n提取公共代码有两种方案，一种是多入口配置时使用`Entry dependencies` 防止重复，手动指出重复插件\\n还有就是使用`split-chunks-plugin` webpack本身有的插件\\n\\n##### Entry dependencies\\n```\\n// 使用Entry dependencies 防止重复，手动指出重复插件\\nentry: {\\n\\tindex: {\\n\\t\\timport: \\\"./src/index.js\\\",\\n\\t\\tdependOn: \\\"shared\\\",\\n\\t},\\n\\totherlodashDeepLog: {\\n\\t\\timport: \\\"./src/lodashLog.js\\\",\\n\\t\\tdependOn: \\\"shared\\\",\\n\\t},\\n\\tshared: \\\"lodash\\\",\\n}\\n该配置会把两个文件都导入用的lodash单独生成一个文件并各自引入\\n```\\n##### splitChunks\\n```\\nentry: {\\n\\t// // 多入口文件\\n\\tindex: \\\"./src/index.js\\\",\\n\\tlodashDeepLog: \\\"./src/lodashLog.js\\\",\\n},\\n...\\noptimization: {\\n\\tsplitChunks: {\\n\\t\\tchunks: 'all'\\n\\t},\\n}\\n自动识别公共的模块依赖并抽离成单独的chunk\\n```\\n\\n####  动态导入\\n使用import方法加载模块\\n```\\nexport function logStr() {\\n    // import 功能返回promise，可用then处理加载的数据\\n\\treturn import(\\\"lodash\\\").then(({ default: _ }) => {\\n\\t\\treturn _.join([\\\"Hello\\\", \\\"webpack\\\", \\\"import()\\\"], ' ')\\n\\t});\\n}\\nlogStr().then((str) => {\\n    console.log(str)\\n});\\n\\n```\\n动态导入可以应用到懒加载、预加载等\\n##### 懒加载\\n页面有些功能可能用不并不一定使用到，我们可以使用import懒加载模块，当事件触发或条件满足后才进行加载\\n\\n```\\nconst button = document.createElement('button')\\nbutton.innerHTML = '点击加法'\\napp.appendChild(button)\\nbutton.addEventListener('click', ()=> {\\n    // /* webpackChunkName: 'math' */ 魔法注释，自定义打包文件名字\\n    import(/* webpackChunkName: 'math' */'./math').then(({add}) => {\\n        console.log(add(33,44))\\n    })\\n})\\n// 只有当点击按钮才会加载math文件，并使用math文件中的add方法\\n```\\n\\n##### 预获取和预加载\\n- webpackPrefetch：将来某些导航下可能需要的资源\\n    - 在head中增加一个link标签，对应src会在首页面加载完毕，网络空闲的时候再去加载打包好的math.bundle.js。在需要动态导入资源时，会再次加载 \\n- webpackPreload：动态导入时加载，和懒加载相似\\n\\n```\\n// 预获取和预加载都是使用魔法注释来进行配置， 将webpackPrefetch改为webpackPreload即为预加载\\nimport(/* webpackChunkName: 'math', webpackPrefetch:true */'./math').then(({add}) => {\\n    console.log(add(33,44))\\n})\\n```\\n\\n#### 缓存\\n缓存主要分三部分，\\n- 将JS文件都放到一个文件夹中，\\n- 项目文件输出加hash值\\n    - 防止浏览器缓存不使用最新的版本文件\\n- 第三方库缓存：第三方库因为不更新，文件名不需要hash值更新，使用固定值即可\\n\\n```\\noutput: {\\n\\t// js相关文件统一放到js文件夹中\\n\\t// [name] 文件本身名称, [contenthash] hash值，文件内容更改时hash值才会更改，\\n\\tfilename: \\\"js/[name]_[contenthash]_bounder.js\\\",\\n}\\n...\\noptimization: {\\n\\tsplitChunks: {\\n\\t\\tcacheGroups: {\\n\\t\\t\\tvendor: {\\n\\t\\t\\t\\ttest: /[\\\\\\\\/]node_modules[\\\\\\\\/]/,\\n\\t\\t\\t\\t// 将node_modules中的文件打包到verdors文件中，包中依赖不变的话生成的包名字不变\\n\\t\\t\\t\\tname: \\\"dependOn\\\",\\n\\t\\t\\t\\tchunks: \\\"all\\\",\\n\\t\\t\\t},\\n\\t\\t},\\n\\t},\\n}\\n```\\n\\n#### 开发环境与生产环境配置\\n> 开发环境与生产环境通常所要求的配置不同，例如生产环境代码压缩，文件名增加hash等，本小节进行开发环境与生产环境的公共配置提取及npm指令\\n\\n##### 公共路径\\n目前生成的文件引用都是通过相对路径引用\\n```\\n<script defer src=\\\"js/dependOn_bounder.js\\\"></script>\\n<script defer src=\\\"js/index_bounder.js\\\"></script>\\n<script defer src=\\\"js/lodashDeepLog_bounder.js\\\"></script>\\n```\\n但是生产环境，我们可能需要将打包产物放在CDN或者公司服务器上，可以通过公共路径进行`publicPath`进行绝对路径的引用\\n```\\nmodule.exports = {\\n    ...\\n    output: {\\n\\t\\tpublicPath: \\\"http://localhost:5501/webpack/multiple-env/dist/\\\",\\n\\t\\t...\\n\\t}\\n\\t...\\n}\\n\\n配置后引用\\n<script defer=\\\"defer\\\" src=\\\"http://localhost:5501/webpack/multiple-env/dist/js/dependOn_bounder.js\\\"></script>\\n<script defer=\\\"defer\\\" src=\\\"http://localhost:5501/webpack/multiple-env/dist/js/index_bounder.js\\\"></script>\\n<script defer=\\\"defer\\\" src=\\\"http://localhost:5501/webpack/multiple-env/dist/js/lodashDeepLog_bounder.js\\\">\\n```\\n通过配置公共路径，打包后的产物可以直接引用CDN或者公司服务器上的资源\\n\\n##### 环境变量 Environment variable\\n通过环境变量，区分开发环境和生成环境，从而加载不同的配置\\n```\\n# 命令行可以增加指定环境的参数\\nnpx webpack --env production\\n\\nmodule.exports = (env) => {\\n    return {\\n        mode: env.production ? \\\"production\\\" : \\\"development\\\",\\n    }\\n}\\n```\\n##### 配置文件拆分\\n将不同的环境的配置文件拆分，并通过指令加载对应的配置文件\\n```\\n# -c 指定配置文件 \\nnpx webpack serve -c ./config/webpack.config.dev.js // 开发环境的配置\\nnpx webpack -c ./config/webpack.config.pro.js // 生成环境的配置\\n```\\n##### 提取公共配置\\n将不同配置中公共的配置提取出单独的一个文件，不同环境只需要保留对应环境的配置即可，\\n通过webpack-merge插件进行配置之间的合并\\n```\\n// 安装插件\\nnpm install webpack-merge -D\\n\\n// webpack.config.js\\nconst { merge } = require(\\\"webpack-merge\\\");\\n\\nconst commonConfig = require(\\\"./webpack.config.common\\\");\\nconst productionConfig = require(\\\"./webpack.config.prod\\\");\\nconst developmentConfig = require(\\\"./webpack.config.dev\\\");\\n\\nmodule.exports = (env) => {\\n  switch (true) {\\n    case env.development:\\n      return merge(commonConfig, developmentConfig);\\n    case env.production:\\n      return merge(commonConfig, productionConfig);\\n\\n    default:\\n      return new Error(\\\"No match configuration was found\\\");\\n  }\\n};\\n```\\n这样只需要`npx webpack -c ./config/webpack.config.js --env production/development`,可通过env变量加载对应的配置文件\\n##### npm脚本\\n通过配置npm脚本，简化命令行输入\\n```\\n\\\"scripts\\\": {\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\",\\n    \\\"start\\\": \\\"npx webpack serve -c ./config/webpack.config.js --env development\\\",\\n    \\\"build\\\": \\\"npx webpack -c ./config/webpack.config.js --env production\\\"\\n},\\n\\n//执行\\nnpm run start/build\\n```\\n\\n小结：本章通过`webpack`的基本使用，资源模块，JS编译，代码分离，缓存，开发环境与生产环境配置几个小块，讲述了webpage的基础使用及基本概念\";"],"names":[],"sourceRoot":""}